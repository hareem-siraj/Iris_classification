# -*- coding: utf-8 -*-
"""Iris classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qQLYN2v-KPKykPBWS8f8Wz2ARnUyrdZ5
"""

# Commented out IPython magic to ensure Python compatibility.
#importing modules
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
# %matplotlib inline

#loading the dataset
#column = ['Sepal lenght', 'Sepal width', 'Petal length', 'Petal width', 'Species']
df = pd.read_csv('Iris.csv')
df.head()

#viualizing the dataset
df.describe()

sns.pairplot(df, hue = 'Species')

#separate features and target
data = df.values
X = data[:,1:5]
Y = data[:,5]
print(Y)

#splitting the data into training and testing
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2)

#MODEL 1: Support vector machine algorithm
from sklearn.svm import SVC
model_svc = SVC()
model_svc.fit(X_train, Y_train)

prediction1 = model_svc.predict(X_test)
#caculate accuracy
from sklearn.metrics import accuracy_score
print(accuracy_score(Y_test, prediction1))
for i in range(len(prediction1)):
  print(Y_test[i], prediction1[i])

#MODEL 2: Logistic Regression
from sklearn.linear_model import LogisticRegression
model_LR = LogisticRegression()
model_LR.fit(X_train, Y_train)

prediction2 = model_LR.predict(X_test)
#caculate accuracy
from sklearn.metrics import accuracy_score
print(accuracy_score(Y_test, prediction2)*100)
for i in range(len(prediction2)):
  print(Y_test[i], prediction2[i])

#MODEL 3: DecisionTree Classifier
from sklearn.tree import DecisionTreeClassifier
model_DTC = DecisionTreeClassifier()
model_DTC.fit(X_train, Y_train)

prediction3 = model_DTC.predict(X_test)
#caculate accuracy
from sklearn.metrics import accuracy_score
print(accuracy_score(Y_test, prediction3))
# for i in range(len(prediction2)):
#   print(Y_test[i], prediction2[i])

#A detailed classification report
from sklearn.metrics import classification_report
print(classification_report(Y_test, prediction2))

X_new = np.array([[3,2,1,0.2], [4.9, 2.2, 3.8, 1.1], [5.3, 2.5 , 4.6, 1.9]])
#prediction of the species from the input vector
prediction = model_svc.predict(X_new)
print("Prediction of Species:{}".format(prediction))